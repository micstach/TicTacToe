{
  "author": {
    "name": "kazuhide maruyama"
  },
  "name": "grunt-typescript",
  "description": "compile typescript to javascript",
  "version": "0.6.1",
  "homepage": "https://github.com/k-maru/grunt-typescript",
  "repository": {
    "type": "git",
    "url": "git@github.com:k-maru/grunt-typescript.git"
  },
  "bugs": {
    "url": "https://github.com/k-maru/grunt-typescript/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/k-maru/grunt-typescript/blob/master/LICENSE"
    }
  ],
  "main": "Gruntfile.js",
  "scripts": {
    "start": "grunt build",
    "test": "grunt test"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "dependencies": {
    "q": "~2.0.2",
    "chokidar": "~0.10.2"
  },
  "peerDependencies": {
    "grunt": "~0.4.5",
    "typescript": "1.4.1"
  },
  "devDependencies": {
    "grunt": "~0.4.5",
    "typescript": "1.4.1",
    "grunt-contrib-nodeunit": "~0.4.1",
    "grunt-contrib-clean": "~0.6.0"
  },
  "optionalDependencies": {},
  "keywords": [
    "gruntplugin",
    "typescript"
  ],
  "readme": "grunt-typescript\r\n================\r\n[![Build Status](https://travis-ci.org/k-maru/grunt-typescript.png?branch=master)](https://travis-ci.org/k-maru/grunt-typescript) [![NPM version](https://badge.fury.io/js/grunt-typescript.png)](http://badge.fury.io/js/grunt-typescript)\r\n\r\n[![NPM](https://nodei.co/npm/grunt-typescript.png?downloads=true)](https://nodei.co/npm/grunt-typescript/)\r\n\r\nCompile TypeScript in Grunt\r\n\r\n[Release Note](CHANGELOG.md)\r\n\r\n## Documentation\r\nYou'll need to install `grunt-typescript` first:\r\n\r\n```\r\nnpm install grunt-typescript --save-dev\r\n```\r\n\r\nor add the following line to devDependencies in your package.json\r\n\r\n```\r\n\"grunt-typescript\": \"\",\r\n```\r\n\r\nThen modify your `Gruntfile.js` file by adding the following line:\r\n\r\n```js\r\ngrunt.loadNpmTasks('grunt-typescript');\r\n```\r\n\r\nThen add some configuration for the plugin like so:\r\n\r\n```js\r\ngrunt.initConfig({\r\n  ...\r\n  typescript: {\r\n    base: {\r\n      src: ['path/to/typescript/files/**/*.ts'],\r\n      dest: 'where/you/want/your/js/files',\r\n      options: {\r\n        module: 'amd', //or commonjs\r\n        target: 'es5', //or es3\r\n        basePath: 'path/to/typescript/files',\r\n        sourceMap: true,\r\n        declaration: true\r\n      }\r\n    }\r\n  },\r\n  ...\r\n});\r\n```\r\n\r\nIf you want to create a js file that is a concatenation of all the ts file (like -out option from tsc),\r\nyou should specify the name of the file with the '.js' extension to dest option.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  ...\r\n  typescript: {\r\n    base: {\r\n      src: ['path/to/typescript/files/**/*.ts'],\r\n      dest: 'where/you/want/your/js/file.js',\r\n      options: {\r\n        module: 'amd', //or commonjs\r\n      }\r\n    }\r\n  },\r\n  ...\r\n});\r\n```\r\n\r\n##Options\r\n\r\n###noLib\r\n**type**: `boolean`\r\n\r\nDo not include a default lib.d.ts with global declarations\r\n\r\n###target\r\n**type**: `string`\r\n\r\nSpecify ECMAScript target version: 'ES3' (default), 'ES5', or 'ES6' (experimental)\r\n\r\n###module\r\n**type**: `string`\r\n\r\nSpecify module code generation: \"commonjs\" (default) or \"amd\"\r\n\r\n###sourceMap\r\n**type**: `boolean`\r\n\r\nGenerates corresponding .map files\r\n\r\n###declaration\r\n**type**: `boolean`\r\n\r\nGenerates corresponding .d.ts file\r\n\r\n###removeComments\r\n**type**: `boolean`\r\n\r\nDo not emit comments to output.\r\n\r\n###noImplicitAny\r\n**type**: `boolean`\r\n\r\nWarn on expressions and declarations with an implied 'any' type.\r\n\r\n###noResolve\r\n**type**: `boolean`\r\n\r\nSkip resolution and preprocessing.\r\n\r\n###preserveConstEnums\r\n**type**: `boolean`\r\n\r\nDo not erase const enum declarations in generated code.\r\n\r\n###noEmitOnError\r\n**type**: `boolean`\r\n\r\nDo not emit outputs if any type checking errors were reported.\r\nThe default for this option is set to true for backwards compatibility.\r\n\r\n###suppressImplicitAnyIndexErrors\r\n**type**: `boolean`\r\n\r\nSuppress noImplicitAny errors for indexing objects lacking index signatures.\r\n\r\n##Original Options\r\n\r\n###ignoreError(obsolete)\r\n**type**: `boolean`\r\n\r\nIf the compiler can create a file, the task ignores the error.\r\nDefault value is false.\r\n\r\nThis option is now obsolete. Please use `noEmitOnError` option.\r\n\r\n###basePath\r\n**type**: `string`\r\n\r\nPath component to cut off when mapping the source files to dest files.\r\n\r\n###references\r\n**type**: <`string` | `string[]`>\r\n\r\nSet auto reference libraries.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  ...\r\n  typescript: {\r\n    base: {\r\n      src: ['path/to/typescript/files/**/*.ts'],\r\n      options: {\r\n        references: [\r\n          \"core\",       //lib.core.d.ts\r\n          \"dom\",        //lib.dom.d.ts\r\n          \"scriptHost\", //lib.scriptHost.d.ts\r\n          \"webworker\",  //lib.webworker.d.ts\r\n          \"path/to/reference/files/**/*.d.ts\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  ...\r\n});\r\n```\r\n\r\n###watch\r\n**type**: <`string` | `boolean` | { path?:<`string` | `string[]``>; before?: <`string` | `string[]``>; after?: <`string` | `string[]``>; atBegin: `boolean` }>\r\n\r\nWatch .ts files.\r\nIt runs very quickly the second time since the compilation. It is because you only want to read and output file is limited.\r\n\r\nSpecify the directory where you want to monitor in the options.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  ...\r\n  typescript: {\r\n    base: {\r\n      src: ['path/to/typescript/files/**/*.ts'],\r\n      options: {\r\n        watch: 'path/to/typescript/files' //or ['path/to/typescript/files1', 'path/to/typescript/files2']\r\n      }\r\n    }\r\n  },\r\n  ...\r\n});\r\n```\r\n\r\nIf you specify the true, then automatically detects the directory.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  ...\r\n  typescript: {\r\n    base: {\r\n      src: ['path/to/typescript/files/**/*.ts'],\r\n      options: {\r\n        watch: true //Detect all target files root. eg: 'path/to/typescript/files/'\r\n      }\r\n    }\r\n  },\r\n  ...\r\n});\r\n```\r\n\r\nFor expansion of the future, You can also be specified 'object'.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  ...\r\n  typescript: {\r\n    base: {\r\n      src: ['path/to/typescript/files/**/*.ts'],\r\n      options: {\r\n        watch: {\r\n          path: 'path/to/typescript/files', //or ['path/to/typescript/files1', 'path/to/typescript/files2']\r\n          before: ['beforetasks'],   //Set before tasks. eg: clean task\r\n          after: ['aftertasks']      //Set after tasks.  eg: minify task\r\n          atBegin: true              //Run tasks when watcher starts. default false\r\n        }\r\n      }\r\n    }\r\n  },\r\n  ...\r\n});\r\n```\r\n\r\nâ€»I'm sorry for poor English\r\n",
  "readmeFilename": "README.md",
  "_id": "grunt-typescript@0.6.1",
  "dist": {
    "shasum": "f3f2cdc3a53aeccfa843d8e4d3dd27c370a47c3a"
  },
  "_from": "grunt-typescript@",
  "_resolved": "https://registry.npmjs.org/grunt-typescript/-/grunt-typescript-0.6.1.tgz"
}
